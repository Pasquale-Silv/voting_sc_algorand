#pragma version 10

smart_contracts.voting_sc.contract.VotingSc.approval_program:
    // smart_contracts/voting_sc/contract.py:4
    // class VotingSc(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    method "create_voting(string)void"
    method "get_voting_str()string"
    txna ApplicationArgs 0
    match main_create_voting_route@2 main_get_voting_str_route@3
    err // reject transaction

main_create_voting_route@2:
    // smart_contracts/voting_sc/contract.py:8
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/voting_sc/contract.py:4
    // class VotingSc(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/voting_sc/contract.py:8
    // @arc4.abimethod()
    callsub create_voting
    int 1
    return

main_get_voting_str_route@3:
    // smart_contracts/voting_sc/contract.py:12
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_voting_str
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@6:
    // smart_contracts/voting_sc/contract.py:4
    // class VotingSc(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.voting_sc.contract.VotingSc.create_voting(voting_str: bytes) -> void:
create_voting:
    // smart_contracts/voting_sc/contract.py:8-9
    // @arc4.abimethod()
    // def create_voting(self, voting_str: arc4.String) -> None:
    proto 1 0
    // smart_contracts/voting_sc/contract.py:10
    // self.voting_str = voting_str
    byte "voting_str"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.voting_sc.contract.VotingSc.get_voting_str() -> bytes:
get_voting_str:
    // smart_contracts/voting_sc/contract.py:12-13
    // @arc4.abimethod()
    // def get_voting_str(self) -> arc4.String:
    proto 0 1
    // smart_contracts/voting_sc/contract.py:14
    // return self.voting_str
    int 0
    byte "voting_str"
    app_global_get_ex
    assert // check voting_str exists
    retsub
